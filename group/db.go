// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package group

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createReportStmt, err = db.PrepareContext(ctx, createReport); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReport: %w", err)
	}
	if q.createServerStmt, err = db.PrepareContext(ctx, createServer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateServer: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteReportStmt, err = db.PrepareContext(ctx, deleteReport); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteReport: %w", err)
	}
	if q.getReportStmt, err = db.PrepareContext(ctx, getReport); err != nil {
		return nil, fmt.Errorf("error preparing query GetReport: %w", err)
	}
	if q.listUserReportsStmt, err = db.PrepareContext(ctx, listUserReports); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserReports: %w", err)
	}
	if q.updateReportStmt, err = db.PrepareContext(ctx, updateReport); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReport: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createReportStmt != nil {
		if cerr := q.createReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReportStmt: %w", cerr)
		}
	}
	if q.createServerStmt != nil {
		if cerr := q.createServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createServerStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteReportStmt != nil {
		if cerr := q.deleteReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteReportStmt: %w", cerr)
		}
	}
	if q.getReportStmt != nil {
		if cerr := q.getReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReportStmt: %w", cerr)
		}
	}
	if q.listUserReportsStmt != nil {
		if cerr := q.listUserReportsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserReportsStmt: %w", cerr)
		}
	}
	if q.updateReportStmt != nil {
		if cerr := q.updateReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReportStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	createReportStmt    *sql.Stmt
	createServerStmt    *sql.Stmt
	createUserStmt      *sql.Stmt
	deleteReportStmt    *sql.Stmt
	getReportStmt       *sql.Stmt
	listUserReportsStmt *sql.Stmt
	updateReportStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		createReportStmt:    q.createReportStmt,
		createServerStmt:    q.createServerStmt,
		createUserStmt:      q.createUserStmt,
		deleteReportStmt:    q.deleteReportStmt,
		getReportStmt:       q.getReportStmt,
		listUserReportsStmt: q.listUserReportsStmt,
		updateReportStmt:    q.updateReportStmt,
	}
}
