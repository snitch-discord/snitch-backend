// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package lookup

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createGroupStmt, err = db.PrepareContext(ctx, createGroup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroup: %w", err)
	}
	if q.createServerStmt, err = db.PrepareContext(ctx, createServer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateServer: %w", err)
	}
	if q.deleteGroupStmt, err = db.PrepareContext(ctx, deleteGroup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroup: %w", err)
	}
	if q.deleteServerStmt, err = db.PrepareContext(ctx, deleteServer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteServer: %w", err)
	}
	if q.getGroupStmt, err = db.PrepareContext(ctx, getGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroup: %w", err)
	}
	if q.getServerCountStmt, err = db.PrepareContext(ctx, getServerCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetServerCount: %w", err)
	}
	if q.getServerGroupStmt, err = db.PrepareContext(ctx, getServerGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetServerGroup: %w", err)
	}
	if q.listGroupsStmt, err = db.PrepareContext(ctx, listGroups); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroups: %w", err)
	}
	if q.updateGroupStmt, err = db.PrepareContext(ctx, updateGroup); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroup: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createGroupStmt != nil {
		if cerr := q.createGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupStmt: %w", cerr)
		}
	}
	if q.createServerStmt != nil {
		if cerr := q.createServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createServerStmt: %w", cerr)
		}
	}
	if q.deleteGroupStmt != nil {
		if cerr := q.deleteGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupStmt: %w", cerr)
		}
	}
	if q.deleteServerStmt != nil {
		if cerr := q.deleteServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteServerStmt: %w", cerr)
		}
	}
	if q.getGroupStmt != nil {
		if cerr := q.getGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupStmt: %w", cerr)
		}
	}
	if q.getServerCountStmt != nil {
		if cerr := q.getServerCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServerCountStmt: %w", cerr)
		}
	}
	if q.getServerGroupStmt != nil {
		if cerr := q.getServerGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServerGroupStmt: %w", cerr)
		}
	}
	if q.listGroupsStmt != nil {
		if cerr := q.listGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupsStmt: %w", cerr)
		}
	}
	if q.updateGroupStmt != nil {
		if cerr := q.updateGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createGroupStmt    *sql.Stmt
	createServerStmt   *sql.Stmt
	deleteGroupStmt    *sql.Stmt
	deleteServerStmt   *sql.Stmt
	getGroupStmt       *sql.Stmt
	getServerCountStmt *sql.Stmt
	getServerGroupStmt *sql.Stmt
	listGroupsStmt     *sql.Stmt
	updateGroupStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createGroupStmt:    q.createGroupStmt,
		createServerStmt:   q.createServerStmt,
		deleteGroupStmt:    q.deleteGroupStmt,
		deleteServerStmt:   q.deleteServerStmt,
		getGroupStmt:       q.getGroupStmt,
		getServerCountStmt: q.getServerCountStmt,
		getServerGroupStmt: q.getServerGroupStmt,
		listGroupsStmt:     q.listGroupsStmt,
		updateGroupStmt:    q.updateGroupStmt,
	}
}
