// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package group

import (
	"context"
)

const createAllTables = `-- name: CreateAllTables :exec
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY
) STRICT
`

func (q *Queries) CreateAllTables(ctx context.Context) error {
	_, err := q.exec(ctx, q.createAllTablesStmt, createAllTables)
	return err
}

const getAllReports = `-- name: GetAllReports :many
SELECT 
    report_text,
    reporter_id,
    reported_user_id,
    origin_server_id
FROM reports
`

type GetAllReportsRow struct {
	ReportText     string `json:"report_text"`
	ReporterID     int    `json:"reporter_id"`
	ReportedUserID int    `json:"reported_user_id"`
	OriginServerID int    `json:"origin_server_id"`
}

func (q *Queries) GetAllReports(ctx context.Context) ([]GetAllReportsRow, error) {
	rows, err := q.query(ctx, q.getAllReportsStmt, getAllReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllReportsRow
	for rows.Next() {
		var i GetAllReportsRow
		if err := rows.Scan(
			&i.ReportText,
			&i.ReporterID,
			&i.ReportedUserID,
			&i.OriginServerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
