// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addServerStmt, err = db.PrepareContext(ctx, addServer); err != nil {
		return nil, fmt.Errorf("error preparing query AddServer: %w", err)
	}
	if q.addUserStmt, err = db.PrepareContext(ctx, addUser); err != nil {
		return nil, fmt.Errorf("error preparing query AddUser: %w", err)
	}
	if q.createReportStmt, err = db.PrepareContext(ctx, createReport); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReport: %w", err)
	}
	if q.getAllReportsStmt, err = db.PrepareContext(ctx, getAllReports); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllReports: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addServerStmt != nil {
		if cerr := q.addServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addServerStmt: %w", cerr)
		}
	}
	if q.addUserStmt != nil {
		if cerr := q.addUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserStmt: %w", cerr)
		}
	}
	if q.createReportStmt != nil {
		if cerr := q.createReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReportStmt: %w", cerr)
		}
	}
	if q.getAllReportsStmt != nil {
		if cerr := q.getAllReportsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllReportsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                DBTX
	tx                *sql.Tx
	addServerStmt     *sql.Stmt
	addUserStmt       *sql.Stmt
	createReportStmt  *sql.Stmt
	getAllReportsStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                tx,
		tx:                tx,
		addServerStmt:     q.addServerStmt,
		addUserStmt:       q.addUserStmt,
		createReportStmt:  q.createReportStmt,
		getAllReportsStmt: q.getAllReportsStmt,
	}
}
