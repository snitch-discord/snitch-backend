// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"
)

const addServer = `-- name: AddServer :exec
INSERT INTO servers (
    server_id
) VALUES (?)
`

func (q *Queries) AddServer(ctx context.Context, serverID int) error {
	_, err := q.exec(ctx, q.addServerStmt, addServer, serverID)
	return err
}

const addUser = `-- name: AddUser :exec
INSERT OR IGNORE INTO users (
    user_id
) VALUES (?)
`

func (q *Queries) AddUser(ctx context.Context, userID int) error {
	_, err := q.exec(ctx, q.addUserStmt, addUser, userID)
	return err
}

const createReport = `-- name: CreateReport :one
INSERT INTO reports (
    report_text,
    reporter_id, 
    reported_user_id,
    origin_server_id
) values (?, ?, ?, ?)
RETURNING report_id
`

type CreateReportParams struct {
	ReportText     string `json:"report_text"`
	ReporterID     int    `json:"reporter_id"`
	ReportedUserID int    `json:"reported_user_id"`
	OriginServerID int    `json:"origin_server_id"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (int, error) {
	row := q.queryRow(ctx, q.createReportStmt, createReport,
		arg.ReportText,
		arg.ReporterID,
		arg.ReportedUserID,
		arg.OriginServerID,
	)
	var report_id int
	err := row.Scan(&report_id)
	return report_id, err
}

const createReportTable = `-- name: CreateReportTable :exec
CREATE TABLE IF NOT EXISTS reports (
    report_id INTEGER PRIMARY KEY,
    report_text TEXT NOT NULL,
    reporter_id INTEGER NOT NULL REFERENCES users(user_id),
    reported_user_id INTEGER NOT NULL REFERENCES users(user_id),
    origin_server_id INTEGER NOT NULL REFERENCES servers(server_id)
) STRICT
`

func (q *Queries) CreateReportTable(ctx context.Context) error {
	_, err := q.exec(ctx, q.createReportTableStmt, createReportTable)
	return err
}

const createServerTable = `-- name: CreateServerTable :exec
CREATE TABLE IF NOT EXISTS servers (
    server_id INTEGER PRIMARY KEY
) STRICT
`

func (q *Queries) CreateServerTable(ctx context.Context) error {
	_, err := q.exec(ctx, q.createServerTableStmt, createServerTable)
	return err
}

const createUserTable = `-- name: CreateUserTable :exec
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY
) STRICT
`

func (q *Queries) CreateUserTable(ctx context.Context) error {
	_, err := q.exec(ctx, q.createUserTableStmt, createUserTable)
	return err
}

const getAllReports = `-- name: GetAllReports :many
SELECT 
    report_text,
    reporter_id,
    reported_user_id,
    origin_server_id
FROM reports
`

type GetAllReportsRow struct {
	ReportText     string `json:"report_text"`
	ReporterID     int    `json:"reporter_id"`
	ReportedUserID int    `json:"reported_user_id"`
	OriginServerID int    `json:"origin_server_id"`
}

func (q *Queries) GetAllReports(ctx context.Context) ([]GetAllReportsRow, error) {
	rows, err := q.query(ctx, q.getAllReportsStmt, getAllReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllReportsRow
	for rows.Next() {
		var i GetAllReportsRow
		if err := rows.Scan(
			&i.ReportText,
			&i.ReporterID,
			&i.ReportedUserID,
			&i.OriginServerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
